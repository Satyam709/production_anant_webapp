// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{
  // basic user details
  id String @unique @id @default(uuid())
  roll_number Int @unique
  name String
  password String
  branch branch_options?
  batch String?
  position position_options?
  club_dept club_dept_options[]
  joined DateTime @default(now())
  imageURL String?
  linkedIn String?
  github String?
  instagram String?
  
  // notice
  notices Notice[]    @relation(name:"notice-posted")
  
  // meetings
  meetings_conducted Meeting[]    @relation(name:"meeting-host")
  meetings_attended Meeting[] @relation(name:"meeting-attended")

  // team details
  team Team[] @relation(name: "team-leaded")
  team_member Team[] @relation(name: "team-member")

  // Orders placed by the user
  orders Order[] @relation(name: "orders-placed")

  //payment verification
  adminVerification AdminVerification[] @relation(name: "verified_by")

  // Pending requests
  pending_requests Pending_requests[]

  //events
  events_created Events[]
  events_participated Events[] @relation(name: "event_participant_member")
  first_prize Events[] @relation(name: "first_prize")
  second_prize Events[] @relation(name: "second_prize")
  third_prize Events[] @relation(name: "third_prize")

  //compitition
  compititions_created Competitions[]
  compititions_participated Competitions[] @relation(name: "participant_member")
  first_prize_comp Competitions[] @relation(name: "first_prize_comp")
  second_prize_comp Competitions[] @relation(name: "second_prize_comp")
  third_prize_comp Competitions[] @relation(name: "third_prize_comp")

  Internship Internship[] @relation(name: "internship")
}

model Notice{
  notice_id String @id @default(uuid())
  headline String
  body String
  postedOn DateTime  @default(now())
  category notice_cat
  userID String
  is_active Boolean @default(true)
  postedBy User @relation(name: "notice-posted",fields: [userID], references: [id])
}

model Meeting{
  meeting_id String @id @default(uuid())
  venue String
  starts DateTime
  duration Int?
  topic_of_discussion String?
  hostID String
  conductor User @relation(name: "meeting-host", fields: [hostID], references: [id])
  attendees User[] @relation(name:"meeting-attended")
}

model Team{
  team_id String @id @default(uuid())
  team_name String @unique
  team_leader_id String
  team_leader User @relation(name: "team-leaded", fields: [team_leader_id], references: [id])
  team_members User[] @relation(name: "team-member")
  participated Competitions[] @relation(name: "participant_team")
  // Pending requests
  pending_requests Pending_requests[]
}

model Pending_requests{
  request_id String @id @default(uuid())
  user_id String
  team_id String
  request_time DateTime @default(now())
  user User @relation(fields: [user_id], references: [id])
  team Team @relation(fields: [team_id], references: [team_id])
}

model Competitions{
  competition_id String @id @default(uuid())
  competitionName String @unique
  conductedBy String
  conductedOn DateTime
  registration_deadline DateTime
  venue String
  prize String?
  description String
  imageURL String?
  min_team_size Int
  max_team_size Int
  creator_id String
  first_prize_id String?
  second_prize_id String?
  third_prize_id String?

  createdBy User @relation(fields: [creator_id], references: [id])
  teams_participated Team[] @relation(name: "participant_team")
  users_participated User[] @relation(name: "participant_member")

  first_prize User[] @relation(name: "first_prize_comp")
  second_prize User[] @relation(name: "second_prize_comp")
  third_prize User[] @relation(name: "third_prize_comp")
}

model Events{
  event_id String @id @default(uuid())
  eventName String @unique
  conductedBy String
  conductedOn DateTime
  registration_deadline DateTime
  venue String
  description String
  prize String?
  imageURL String?
  creator_id String
  first_prize_id String?
  second_prize_id String?
  third_prize_id String?

  users_participated User[] @relation(name: "event_participant_member")
  
  createdBy User @relation(fields: [creator_id], references: [id])
  first_prize User? @relation(name: "first_prize", fields: [first_prize_id], references: [id])
  second_prize User? @relation(name: "second_prize", fields: [second_prize_id], references: [id])
  third_prize User? @relation(name: "third_prize", fields: [third_prize_id], references: [id])
}

// latest news
model LatestNews {
  id          Int      @id @default(autoincrement())
  title       String
  description String?   // Optional
  link        String?   // Optional
  is_active   Boolean   @default(true)
  created_at  DateTime  @default(now())
}

model Internship {
  id          Int      @id @default(autoincrement())
  user_id     String
  title       String
  description String?   // Optional
  link        String?   // Optional
  is_active   Boolean   @default(true) // for showing/hiding the internship
  email       String?   // Optional for now
  department  InternshipDepartment
  class       InternshipClass

  // internship details
  company_name String
  duration     String

  created_at  DateTime  @default(now())
  user        User      @relation(fields: [user_id], references: [id] , name: "internship")
}

enum InternshipDepartment {
  Mathematics
}


enum InternshipClass {
  MSc
  BtechMNC
}

enum branch_options {
  AIML
  MNC
  MSC
  CSE
  IT
  ECE
  EE 
  ME
  CE
  IIOT
}

enum position_options {
  Member
  Coordinator
  Secretary
  InCharge
  President
}

enum club_dept_options {
  General
  Tech
  PR
  Design
}

enum notice_cat {
  General
  Technical
  Sponsorship
}

// Merchandise table

model Merchandise {
  item_id      Int      @id @default(autoincrement())
  name         String
  description  String?
  price        Float
  stock_quantity Int
  category     item_category
  image_url    String?
  created_at   DateTime @default(now())
  updated_at   DateTime @default(now()) @updatedAt

  orderItems   OrderItem[]
}

model Order {
  order_id      Int       @id @default(autoincrement())
  user_id       String     
  total_price   Float
  status        order_status  @default(PENDING)
  payment_method String?  // UPI, BANK_TRANSFER, etc.
  transaction_id String?
  created_at    DateTime  @default(now())

  user          User     @relation(fields: [user_id], references: [id], name: "orders-placed")
  orderItems    OrderItem[]

  adminVerification AdminVerification? 
}


model OrderItem {
  order_item_id Int    @id @default(autoincrement())
  order_id      Int
  item_id       Int
  quantity      Int
  price_per_item Float

  order         Order     @relation(fields: [order_id], references: [order_id])
  merchandise   Merchandise @relation(fields: [item_id], references: [item_id])
}


model AdminVerification {
  verification_id Int      @id @default(autoincrement())
  order_id        Int      @unique
  admin_id        String
  status          String  // APPROVED, REJECTED
  remarks         String?
  verified_at     DateTime @default(now())

  order           Order    @relation(fields: [order_id], references: [order_id])
  user            User    @relation(fields: [admin_id], references: [id] , name: "verified_by")
}

enum category {
  General
  Technical
  Sponsorship
}
enum order_status {
  PENDING
  APPROVED
  REJECTED
}

enum item_category {
  Apparel
  Accessories
  Stationery
  Gadgets
  Books
}



// gallery and images
model Album {
  id      String  @id @default(cuid())
  name    String  @unique
  images  AlbumImages[]
  createdAt DateTime @default(now())
}

model AlbumImages {
  id      String  @id @default(cuid())
  url     String
  albumId String
  album   Album   @relation(fields: [albumId], references: [id])
}

